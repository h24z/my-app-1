version: '3.8'

# Services
services:

  # Scheduler Service
  scheduler:
    restart: unless-stopped
    image: mcuadros/ofelia
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/scheduler/config.ini:/etc/ofelia/config.ini
    depends_on:
      - backend

  # Worker Service
  worker:
    restart: unless-stopped
    build:
      context: ./src/backend
      target: worker
      args:
        HOST_UID: $HOST_UID
    working_dir: /var/www/backend
    volumes:
      - ./src/backend:/var/www/backend
    depends_on:
      - backend

  # Redis Service
  redis:
    restart: unless-stopped
    image: redis:alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
        - 6379:6379
    volumes:
      - redisdata:/data

  # Redis Commander
  redis-commander:
#    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8081:8081"

  # Ngrok Service
  ngrok:
    restart: unless-stopped
    image: wernight/ngrok
    ports:
    - 4040:4040
    environment:
      NGROK_PROTOCOL: http
      NGROK_PORT: nginx:443
      NGROK_AUTH: ${NGROK_AUTH}
    depends_on:
      - nginx

  # Nginx Service
  nginx:
#    container_name: nginx
    restart: unless-stopped
    build: ./.docker/nginx
#    image: nginx:alpine
    ports:
      - 80:80
      - 443:443
    networks:
      default:
        aliases:
          - frontend.demo.test
    volumes:
#      - ./src:/var/www/php
      - ./src/backend:/var/www/backend
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
      - phpmyadmindata:/var/www/phpmyadmin
      - ./.docker/nginx/certs:/etc/nginx/certs
    depends_on:
#      - php
      - backend
      - phpmyadmin
      - frontend

  # Frontend Service
  frontend:
    restart: unless-stopped
    build: ./src/frontend
    working_dir: /var/www/frontend
    volumes:
      - ./src/frontend:/var/www/frontend
    depends_on:
      - backend

  # Backend Service
  backend:
    restart: unless-stopped
    build:
      context: ./src/backend
      target: backend
      args:
        HOST_UID: $HOST_UID
    working_dir: /var/www/backend
    volumes:
      - ./src/backend:/var/www/backend
      - ./.docker/backend/init:/opt/files/init
      - ./.docker/nginx/certs:/usr/local/share/ca-certificates
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  # PHP Service
#  php:
#    build: ./.docker/php
#    container_name: php-fpm
#    restart: unless-stopped
#    image: php:fpm-alpine
#    working_dir: /var/www/php
#    volumes:
#      - ./src:/var/www/php
#    depends_on:
#      mysql:
#        condition: service_healthy

  # PhpMyAdmin Service
  phpmyadmin:
#    container_name: pma
    restart: unless-stopped
    image: phpmyadmin/phpmyadmin:fpm-alpine
#    ports:
#      - 8080:80
    environment:
      PMA_HOST: mysql
    volumes:
      - phpmyadmindata:/var/www/html
    depends_on:
      mysql:
        condition: service_healthy

  # MySQL Service
  mysql:
#    container_name: mysql
    restart: unless-stopped
    image: mysql/mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: r00t
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: demo
    volumes:
      - ./.docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - mysqldata:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 5s
      retries: 10

# Volumes
volumes:

  mysqldata:
  phpmyadmindata:
  redisdata: